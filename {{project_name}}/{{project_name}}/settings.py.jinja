from pathlib import Path

from environs import Env

env = Env()
env.read_env()

BASE_DIR = Path(__file__).resolve().parent.parent

SECRET_KEY = env("SECRET_KEY")
DEBUG = env.bool("DEBUG", default=False)

ALLOWED_HOSTS = env.list("ALLOWED_HOSTS", default=[])

SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
SECURE_HSTS_SECONDS = 3600

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # 1st party
    "{{project_name}}.users",
    "{{project_name}}.styles",
    # 3rd party
    "django_probes",
    "debug_toolbar",
    "widget_tweaks",
    "django_tables2",
    {% if include_trojsten -%}
    "mozilla_django_oidc",
    {%- endif %}
]

MIDDLEWARE = [
    "debug_toolbar.middleware.DebugToolbarMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    {% if include_trojsten -%}
    "mozilla_django_oidc.middleware.SessionRefresh",
    {%- endif %}
]

ROOT_URLCONF = "{{project_name}}.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "{{project_name}}.wsgi.application"

DATABASES = {
    "default": env.dj_db_url("DATABASE_URL", default="sqlite://:memory:"),
}

AUTH_USER_MODEL = "{{project_name}}_users.User"
{% if include_trojsten -%}
AUTH_PASSWORD_VALIDATORS = []
AUTHENTICATION_BACKENDS = [
    "{{project_name}}.users.auth.TrojstenID",
    "django.contrib.auth.backends.ModelBackend",
]
LOGIN_URL = "oidc_authentication_init"
OIDC_OP_JWKS_ENDPOINT = "https://id.trojsten.sk/oauth/.well-known/jwks.json"
OIDC_OP_AUTHORIZATION_ENDPOINT = "https://id.trojsten.sk/oauth/authorize/"
OIDC_OP_USER_ENDPOINT = "https://id.trojsten.sk/oauth/userinfo/"
OIDC_OP_TOKEN_ENDPOINT = "https://id.trojsten.sk/oauth/token/"
OIDC_RP_SCOPES = "openid email profile"
OIDC_RP_SIGN_ALGO = "RS256"
OIDC_RP_CLIENT_ID = env("OIDC_RP_CLIENT_ID", default="")
OIDC_RP_CLIENT_SECRET = env("OIDC_RP_CLIENT_SECRET", default="")
OIDC_OP_LOGOUT_URL_METHOD = "{{project_name}}.users.auth.logout_url"
OIDC_RENEW_ID_TOKEN_EXPIRY_SECONDS = 3600  # 1-hour
{%- else -%}
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

{%- endif %}
LOGIN_REDIRECT_URL = "/"
LOGOUT_REDIRECT_URL = "/"

LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = True

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "static"
MEDIA_URL = "uploads/"
MEDIA_ROOT = BASE_DIR / "uploads"

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

email = env.dj_email_url("EMAIL_URL", default="consolemail://")
vars().update(email)
DEFAULT_FROM_EMAIL = env("EMAIL_FROM", default="Django <django@localhost>")


LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "log_format": {
            "format": "[%(levelname)s] %(message)s",
        },
    },
    "handlers": {
        "console": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "log_format",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "level": "INFO",
        },
        "{{project_name}}": {
            "handlers": ["console"],
            "level": "INFO",
        },
    },
}

DJANGO_TABLES2_TABLE_ATTRS = {
    "class": "table",
}

dsn = env("SENTRY_DSN", default="")
if dsn:
    import sentry_sdk
    from sentry_sdk.integrations.django import DjangoIntegration

    from {{project_name}} import VERSION

    sentry_sdk.init(
        dsn=dsn,
        integrations=[DjangoIntegration()],
        auto_session_tracking=False,
        traces_sample_rate=0.1,
        send_default_pii=True,
        release=VERSION,
    )

if DEBUG:
    import socket

    # add Docker IPs to INTERNAL_IPS (for DjDT)
    hostname, _, ips = socket.gethostbyname_ex(socket.gethostname())
    INTERNAL_IPS = [ip[:-1] + "1" for ip in ips] + ["127.0.0.1"]
